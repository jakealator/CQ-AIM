% assembleNearFieldMatrices.m
% Created: 02-01-2017 by JDR at UD
% Last Modified: 
%
% Input:
%
% Output:
%
% Outputs the near field components of the AIM algorithm for computing the
% action of the time-harmonic Lippmann-Schwinger equation on a vector. Uses
% p=0 piecewise constant elements on each element and approximates
% integrals on triangles with an exact formula on an equal area circle. 

function nearFieldMatrix = assembleNearFieldMatrices(triAreas,nearFieldDistances, iElements, jElements,c,c0,s,N)

% Contrasts at centroid points
qj =((c0/c(x(,1),x(:,2)))^2-1;

H01 = besselh(0,1,1i*s/c0*nearFieldDistances);

sElements = zeros(length(iElements),1);
%K(diagonal) = -triangleAreas.*(4*1i*c0^2/s^2+(2*pi*1i*c0/s).*H11);
%K(off-diagonal) = triangleAreas(i)*triangleAreas(j)*H01(i,j)

for k = 1:length(iElements)
    if iElements(k)==jElements(k) % On the diagonal
        sElements(k) = -triAreas(iElements(k)).*(4*1i*c0^2/s^2+(2*pi*1i*c0/s).*...
            besselh(1,1,1i*s/c0*sqrt(triAreas(iElements(k)/pi))));
    else
        sElements(k) = triAreas(iElements(k))*triAreas(jElements(k))*...
            besselh(0,1,1i*s/c0*nearFieldDistances(iElement(k),jElement(k)));
    end
end
    
% Create a sparse matrix whose diagonal elements are exactly the ones
% created above. 
M = spdiags(triangleAreas./qj,0,N,N);
K = sparse(iElements,jElements,sElements,N,N);

K = (1i*s^2)/(4*c0^2)*K;

nearFieldMatrix = M+K;



end